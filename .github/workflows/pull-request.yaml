name: buf-pull-request
on: 
    push:
    pull_request:
        branches:
        - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: bufbuild/buf-setup-action@v1
      # Install `protoc` - needed to generate code
      - uses: arduino/setup-protoc@v1
      - uses: bufbuild/buf-lint-action@v1
        with:
            input: "proto"
      - uses: bufbuild/buf-breaking-action@v1
        with:
            input: "proto"
            # The 'main' branch of the GitHub repository that defines the module.
            # Note we specify the subdir to compare against.
            against: "https://github.com/${GITHUB_REPOSITORY}.git#branch=main,ref=HEAD~1,subdir=proto"

      - name: Generate
        run: |
          go install github.com/golang/protobuf/protoc-gen-go@latest
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest
          buf mod update
          buf generate proto

      - name: Cache protobuf library
        id: cache-protobuf
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/protobuf
          key: ${{ runner.os }}-protobuf

      - name: Build protobuf library
        if: steps.cache-protobuf.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/abseil/abseil-cpp.git
          cd abseil-cpp
          mkdir build && cd build
          cmake -DABSL_BUILD_TESTING=OFF -DCMAKE_CXX_STANDARD=14 ..
          make
          sudo make install
          cd ../../

          git clone https://github.com/protocolbuffers/protobuf.git
          cd protobuf
          git submodule update --init --recursive
          cmake . -DCMAKE_CXX_STANDARD=14
          make
          sudo make install
          cd ..

      - name: Install protobuf library
        run: |
          ls -l
          cd protobuf
          sudo make install
          sudo ldconfig  


      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}
